
/* Criação de threads: Aqui, uma nova thread é criada para cada filósofo.
pthread_create é chamado, passando o endereço da thread do 
filósofo atual (dinner->philos[i].self_thread), um segundo argumento como NULL 
(para usar os atributos padrão da thread), o endereço da função que a thread deve 
executar (philos_routines), e um ponteiro para a estrutura do filósofo (&dinner->philos[i]).
 Se pthread_create falhar, ele retornará um valor diferente de zero.

 A função pthread_join é utilizada em programação multithread em C para esperar que uma 
 thread específica termine sua execução. 
- Sincronização: pthread_join bloqueia a thread que a chama até que a thread especificada 
(o primeiro argumento) termine. Isso permite que você sincronize a execução entre threads.
- Recuperação de Resultados: Se a thread que você está aguardando retornar um valor 
(via pthread_exit), você pode capturar esse valor no segundo argumento da função, 
que deve ser um ponteiro para o local onde o valor será armazenado. 
Se não for necessário, você pode passar NULL.
- Limpeza de Recursos: Chamar pthread_join permite que o sistema limpe os recursos utilizados 
pela thread terminada. Se pthread_join não for chamado para uma thread terminada, 
ela permanecerá em um estado "zumbi" até que seus recursos sejam liberados.
*/
